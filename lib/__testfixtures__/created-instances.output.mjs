import Document, { createElement as Document_createElement } from "std:global/Document";
import { apply as Reflect_apply } from "std:global/Reflect";
import { setAttribute as Element_setAttribute, remove as Element_remove, getAttribute as Element_getAttribute, attributes_get as Element_attributes_get } from "std:global/Element";
import { includes as String_includes } from "std:global/String";
import { length_get as NamedNodeMap_length_get } from "std:global/NamedNodeMap";
import { status_set as Window_status_set, status_get as Window_status_get } from "std:global/Window";
const d = new Document();
const elt = Reflect_apply(Document_createElement, d, ['div']);
Reflect_apply(Element_setAttribute, elt, ['color', 'blue']);
Reflect_apply(Element_remove, elt, []);
const atts = Reflect_apply(Element_attributes_get, elt);
Reflect_apply(NamedNodeMap_length_get, atts);
Window_status_set(Reflect_apply(Element_getAttribute, elt, ['color']));
Reflect_apply(String_includes, Window_status_get(), ['b']);
